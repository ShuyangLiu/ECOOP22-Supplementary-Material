"Library"

let imply (A, B) = ~A | B
(* nodetour eliminates the triangle: *)
(*    .--R2--> c --R3--.             *)
(*   /                  v            *)
(*  a --------R1-------> b           *)
let nodetour (R1, R2, R3) = R1 & ~ ( R2; [_]; R3 )
let singlestep (R) = nodetour(R, R, R)
procedure subseteq(A, B) =
 empty (A \ B)
end

procedure inclusion(r1, r2) =
  empty r1 & ~r2
end

procedure total(r,E) =
  let rt = (r | r^-1)
  call inclusion((E*E),rt)
end

"Linux kernel memory model, weakned"

(* Alan Stern, 28 April 2016 *)

include "cos.cat"

let com = rf | co | fr

acyclic (po-loc | com) as sc-per-location

empty rmw & (fre;coe) as atomic


let rdep = addr & (_*R) & rd-dep-fence
let dep = addr | data
let dep-rfi = dep ; rfi
let rdw = po-loc & (fre ; rfe)
let detour = po-loc & (coe ; rfe)
let atomicpo = (RMW*RMW) & po
let addrpo = addr ; po

(********************************************)
(* Shall we keep hb, because of no-thin-air *)
(********************************************)

(* Analyze instruction order in terms of execution, not init and complete *)
let ppo =
	rdep | dep-rfi | rdw |				(* ii0 *)
	detour | atomicpo |				(* ci0 *)
							(* ic0 *)
	((dep | po-loc | ctrl | addrpo) & (_*W))	(* cc0 *)


let strongly-hb = ppo | fence | rfe
(* let obs = ((coe|fre) ; barrier+ ; rfe) & int *)

let hb = strongly-hb | (strongly-hb ; addr ; strongly-hb)

let transitive-propbase = rfe? ; transitive-fence ; hb*


acyclic hb as causality

(**************************************)
(* Add observation, as in herd-models *)
(**************************************)

(* Specific cycles for wmb/rmb *)

let specific-hb = ( ppo | fence ) & ((M*M) \ (W * R))
let lastcom = coe|fre

irreflexive specific-hb; (rfe|coe);specific-hb; lastcom as specific




(*****************)
(* We now weaken *)
(*****************)


(* Traditional observation, with weakened hb *)
irreflexive transitive-propbase;lastcom as obs

(* From now weaken hb *)
let hb-weak = fence | rfe
let transitive-propbase-weak = rfe? ; transitive-fence ; hb*
let propbase-weak = barrier | transitive-propbase-weak
let strong-prop = fre? ; propbase-weak* ; rfe? ; strong-fence ; hb-weak*
let prop = (transitive-propbase-weak & (W*W)) | strong-prop
let atomic-hb = hb-weak+ & ((RMW&W) * _)
let cpord = co | prop | atomic-hb

acyclic cpord as propagation


(* Propagation between strong fences *)
let basic = hb-weak* ; cpord* ; fre? ; propbase-weak* ; rfe?

(* Chains that can prevent the RCU guarantee *)
let s-link = sync ; basic
let c-link = po ; crit^-1 ; po ; basic
let rcu-path0 = s-link |
	(s-link ; c-link) |
	(c-link ; s-link)
let rec rcu-path = rcu-path0 | rcu-path |
	(rcu-path ; rcu-path) |
	(s-link ; rcu-path ; c-link) |
	(c-link ; rcu-path ; s-link)

irreflexive rcu-path as rcu


let xbasic = (basic & (M*M)) \ id \ po

(*
show xbasic
*)

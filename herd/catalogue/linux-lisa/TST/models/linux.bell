"memory barriers"

enum Accesses = 'once || 
                'release || 'acquire ||
                'assign (*rcu_assign_pointer*) || 
                'deref (*rcu_dereference*) ||
                'lderef (*lockless_dereference*) ||
                'ctrl (*control dependencies have to be headed by a ctrl read*)
instructions R[{'once,'acquire,'deref,'lderef,'ctrl}]
instructions W[{'once,'release,'assign}]

enum Barriers = 'wmb || 'rmb || 'mb
                || 'rb_dep (*smp_read_barrier_depends*)
                || 'lock (*rcu_read_lock*) 
                || 'unlock (*rcu_read_unlock*)

instructions F[Barriers]

enum Calls = 'sync
instructions CALL['sync]

let rmb = fencerel(F & Rmb) & (R*R)
let wmb = fencerel(F & Wmb) & (W*W)
let mb = fencerel(F & Mb)  & (M*M)
let sync = fencerel(Sync) & (M*M)


let acq-po = po & (Acquire * M)
let po-rel = po & (M * Release)
let deref-po = po & (Deref * M)
let lderef-po = po & (Lderef * M)
let po-assign = po & (M * Assign)
let ctrl-po = po & (Ctrl* M)

(*
let fences = rmb | wmb | mb | sync 
             (*| po-rel | po-assign | acq-po*)
*)

let lock-po = po & (Lock * M)
let po-unlock = po & (M * Unlock)

show rmb, wmb, mb, acq-po, po-rel, 
  deref-po, po-assign, ctrl-po
(*
  lock-po, po-unlock, sync
*)

(*question for Paul: should acq-po, deref-po and lderef-po be in fences as well?*)

(*R that are rcu_deref create an addr dep 
  with the following R/W--only if the following
  R/W is actually addr-dependent, e.g.:
  RR case
  r2 = rcu_deref(C)
  r3 = *r2

  RW case
  r2 = rcu_deref(C)
  *C = 5

  for now we'll leave data deps out, but we
  should check if:
  r2 = rcu_deref(C)
  q = r2
  creates a data dep or not
  *)
(*smp, dma, mmio: scopes? or bits?*)

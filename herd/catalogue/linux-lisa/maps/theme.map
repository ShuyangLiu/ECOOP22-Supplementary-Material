(*Linux C -> Bell*)

"smp_mb();" -> "f[mb]"
"smp_wmb();" -> "f[wmb]"
"smp_rmb();" -> "f[rmb]"
"rcu_read_lock();" -> "f[lock]"
"rcu_read_unlock();" -> "f[unlock]"
"synchronize_rcu();" -> "f[sync]"
"smp_read_barrier_depends();" -> "f[rb_dep]"

"r1 = ACCESS_ONCE(x);" -> "r[once] r1 x"
"r2 = ACCESS_ONCE(*r1);" -> "lwz r2,0(r1)" /* addr dep. */
"r1 = READ_ONCE(x);" -> "r[once] r1 x"
"r2 = READ_ONCE(*r1);" -> "lwz r2,0(r1)" /* addr dep. */
"r1 = smp_load_acquire(&x);" -> "r[acquire] r1 x"
"r1 = lockless_dereference(x);" -> "r[lderef] r1 x"
"r1 = rcu_dereference(x);" -> "r[deref] r1 x"

"ACCESS_ONCE(x) = 1;" -> "w[once] x 1"
"ACCESS_ONCE(*r2) = r1;" -> "stw r1,0(r2)" /* addr or data dep. */
"WRITE_ONCE(x, 1);" -> "w[once] x 1"
"WRITE_ONCE(*r2, r1);" -> "stw r1,0(r2)" /* addr or data dep. */
"smp_store_release(&x, 1);" -> "w[release] x 1"
"rcu_assign_pointer(p, x);" -> "w[assign] p x"

r1 = ACCESS_ONCE(a); /* example control dependency. */
if (r1) }
        WRITE_ONCE(b, 1);
} ->

                                r[once] r1 a
                                beq r1, 0, END1
                                w[once] b 1
                                END1:

"set_mb(a, 1);" ->      w[once] a 1
                        f[mb]
(*for example:
Bell MP+o-assign+deref-o
{
a = 1;
b = 2;
p = b;
}
 P0             | P1              ;
 w[once] a 3    | r[deref] r1 p   ;
 w[assign] p a  | r[once] r3 r1   ;
exists (1:r1 = a /\ 1:r3 = 1)

becomes:

LinuxC MP+o-assign+deref-o
{
a = 1;
b = 2;
p = b;
}
 P0                         | P1                       ;
 WRITE_ONCE(a, 3);          | r1 = rcu_dereference(p); ;
 rcu_assign_pointer(p, &a); | r2 = READ_ONCE(*r1);     ;
exists (1:r1 = a /\ 1:r2 = 1)

*)

"VIPS"

(*sc per location ok*)
acyclic po-loc | rf | co | fr as sc-per-location

(*lb forbidden, with or without fences*)
acyclic po | rf as no-thin-air

(*si implies sd, which means that whenever we have sd;si we need just si*)
(*cache line size (number of words in it) is strictly larger than the size of a
word for data race freedom; if they coincide we need to get rid of sd;si ->
si*)


(*mp allowed;
  mp+sdfence+sifence forbidden;
  mp+wx-wysd+siry-rx forbidden
  wrc+wxsd+sirx-wysd+siry-rx forbidden
  isa2+wx-wysd+siry-wzsd+sirz-rx forbidden*)
let rel = (_*W);sdfence
let acq = sifence;(R*_)
let rf-upd = rf & (rel*acq) 

let rel-acq-path = po?&(_*rel));rf;((acq*_)& po?

irreflexive rel-acq-path;fr as observation

(*sb allowed;
  sb+wxsd-siry+wysd-siry forbidden
  iriw+wxsd+sirx-ry+wysd+siry-rx forbidden*)

(*r' = wx-wy1sd+wy2sd-sirx+siry1-siry2 forbidden
  because (_*W);sdfence -sdforder-> sdfence;acq;fr irrefl*)
(*s = wx1-wysd+siry-wx2 forbidden*)
(*2+2w' = wx2sd-wy1sd+wy2sd-wx1sd+siry1-siry2+sirx1-sirx2*)

(*extension with forward self invalidation FSI:
                
                 r z
                 fsi
                 r x
                 r y
                 end-fsi
                 r z

                 forward self downgrade FSD*)

(*FSD:

   Wx1             Ry1  Rx2 Rz1
   fsd_start(l)    Rx0  Rz1 Ry1
   Wy1
   Wz1
   fsd_stop(l)
   Wx2
   sd 

MP allowed between Wx1 and Wy1

'fsd_stop(l)' is an SD for every write since the 'fsd_start(l)' construct*)

(*FSI:

  Wx1  Rx0
  Wy1  fsi_start(l)
  sd   Ry1
       fsi_stop
       Rx0
*)

(*queue delegation locking:
  Wm1 Rd2 delegate(Wd1) delegate(Wd2)
  Rd1 Rm1  

with the order: delegate(Wd1) -> delegate(Wd2)
*)

(*scoped consistency paper

  weak consistency = release consistency with only one fence that does both
  release and acquire

  entry consistency

  midway distributed shared memory

  the future(s) of shared data structures*)

(*in catalogue: ABA*)



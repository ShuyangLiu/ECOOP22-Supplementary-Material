"PPC"

let prop r =
  let ww = r & W*W
  and rw = rf;(r & R*W) in
(ww | rw)

let obs r =
  let wr = ((r & W*R);rf^-1) \ id
  and rr = (rf;(r & R*R);rf^-1) \ id in
(wr | rr)

let heavy r = prop(r) | obs(r)
let po-loc = po & loc

let co = co0 | heavy(po-loc)
acyclic co as sc-per-location
let coe = co & ext
let fr = rf^-1;co
let fre = fr & ext
show co, fr

let dp = addr | data
let rdw = po-loc & (fre;rfe)
let detour = po-loc & (coe;rfe)

let ii0 = dp | rdw | rfi
let ic0 = 0
let ci0 = ctrlcfence(ISYNC) | detour
let cc0 = dp | po-loc | ctrl | (addr;po)

let rec ii = ii0 | ci | (ic;ci) | (ii;ii)
and ic = ic0 | ii | cc | (ic;cc) | (ii;ic)
and ci = ci0 | (ci;ii) | (cc;ci)
and cc = cc0 | ci | (ci;ic) | (cc;cc)

let ppo = ii & R*R | ic & R*W
show ppo

let sync = fencerel(SYNC)
let lwsync = fencerel(LWSYNC)
show sync, lwsync
let lwfence = lwsync & (W*W | R*M) | fencerel(EIEIO) & W*W
let fences = sync | lwfence

let hb = ppo | fences | rfe
acyclic hb as no-thin-air

let prop-fence = prop(fences);hb*
let propagation = (co | prop-fence)+
acyclic propagation

let hwfence = prop(sync);hb* | obs(sync)
let observation = co;hwfence
acyclic observation

let read-order = propagation & loc
empty rf & (read-order & (_ * W); read-order)
